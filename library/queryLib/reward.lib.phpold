<?php
class reward{
  //Singleton
  protected static $objInstance;

  public static function get(){
    if(!isset(self::$objInstance)){
      $class=__CLASS__;
      self::$objInstance=new $class;
    }
    return self::$objInstance;
  }

  public function checkEligibilityOfCopperReward($userId, $stadiumId,  $options=array())
  {
    $userLib = autoload::loadLibrary('queryLib', 'user');
    $rewardLib = autoload::loadLibrary('queryLib', 'reward');
    $roomLib = autoload::loadLibrary('queryLib', 'room');
    $userCircletcount = array();

    $userRecentCopperRewardDetail = $rewardLib->getLastFreeCubeRewardDetailForUser($userId, (CUBE_DYNAMITE));
    $unlockTime = (($userRecentCopperRewardDetail['claimed_at']) + UNLOCK_CUBE_DYNAMITE_TIMEOUT);

    if((($unlockTime)-time() <= 0 && ($userRecentCopperRewardDetail['status'] == CONTENT_CLOSED)) || (empty($userRecentCopperRewardDetail))){
      $userCircletcount = $roomLib->getUserRewardCircletCount($userId,  $unlockTime);
    }

    if(!empty($userCircletcount) && $userCircletcount['sum_of_circlet'] >= CIRCLET_COUNT )
    {
      $cubeId = CUBE_DYNAMITE;
      $userLib->insertUserReward(array(
                  'user_id' =>$userId,
                  'cube_id' => $cubeId,
                  'master_stadium_id' => $stadiumId,
                  'created_at' => date('Y-m-d H:i:s'),
                  'status' => CUBE_CAN_BE_CLAIMED));
    }
    return array('total_circlet'=> !empty($userCircletcount)?$userCircletcount['sum_of_circlet']:0, 'unlock_time'=>($unlockTime)-time());
  }

  public function claimCopperCubeReward($userId,  $userRewardId, $claimReward)
  {
    $userLib = autoload::loadLibrary('queryLib', 'user');
    $rewardLib = autoload::loadLibrary('queryLib', 'reward');
    $result = array();

    $userReward = $userLib->getUserRewardDetail($userRewardId);
    $userDetail = $userLib->getUserDetail($userId);

    $result['cube_id'] = $userReward['cube_id'];
    $result['master_stadium_id'] = $userReward['master_stadium_id'];
    $result['reward_status'] = $userReward['status'];
    $result['crystal_bonus'] = COPPER_CUBE_CRYSTAL_COUNT;

    if($claimReward > 0)
    {
      $result['reward_status'] = CONTENT_CLOSED;

      $userLib->updateUserReward($userRewardId, array('claimed_at' => time(), 'status' => CONTENT_CLOSED));
      $userLib->updateUser($userId,  array('crystal' => $userDetail['crystal'] + COPPER_CUBE_CRYSTAL_COUNT,'is_copper_cube_notification_sent'=>CONTENT_ACTIVE));

    }

    return $result;
  }

  public function claimBronzeCubeReward($userId,  $userRewardId, $claimReward)
  {
    $userLib = autoload::loadLibrary('queryLib', 'user');
    $rewardLib = autoload::loadLibrary('queryLib', 'reward');
    $cardLib = autoload::loadLibrary('queryLib', 'card');

    $result = array();

    $userReward = $userLib->getUserRewardDetail($userRewardId);
    $userDetail = $userLib->getUserDetail($userId);

    $result['cube_id'] = $userReward['cube_id'];
    $result['reward_status'] = $userReward['status'];
    $result['master_stadium_id'] = $userReward['master_stadium_id'];

    if($claimReward > 0)
    {
      $commonCardList = $cardLib->getMasterCardRarityListBasedOnStadium($userReward['master_stadium_id'], CARD_RARITY_COMMON);

      $randomCard = rand(0, count($commonCardList)-1);

      if(rand(0, 1))
      {
        $result['total_card_in_cube'] = 1;
        $commonCard = $commonCardList[$randomCard]['master_card_id'];
        $result['card_details'][] =  $rewardLib->addRewardedCard($userId, $commonCard, DEFAULT_CARD_COUNT);
      } else
      {
        $result['crystal_bonus'] = BRONZE_CUBE_CRYSTAL_COUNT;
        $userLib->updateUser($userId, array('crystal' => $userDetail['crystal'] + BRONZE_CUBE_CRYSTAL_COUNT));
      }

      $result['reward_status'] = CONTENT_CLOSED;
      $userLib->updateUserReward($userRewardId,  array('claimed_at' => time(), 'status' => CONTENT_CLOSED));
    }

    return $result;
  }

  public function claimCubeRewardedDuringMatch($userId, $userRewardId, $claimReward, $claimCrystalUpgrade=array())
  {
    $userLib = autoload::loadLibrary('queryLib', 'user');
    $cubeLib = autoload::loadLibrary('queryLib', 'cube');
    $cardLib = autoload::loadLibrary('queryLib', 'card');
    $rewardLib = autoload::loadLibrary('queryLib', 'reward');

    $result = array();
    $userReward = $userLib->getUserRewardDetail($userRewardId);
    $userDetail = $userLib->getUserDetail($userId);

    $cubeRewardDetail = $cubeLib->getCubeRewardDetailForStadium($userReward['cube_id'], $userReward['master_stadium_id']);
    $maxTime = ($userReward['cube_id'] == CUBE_FIRECRACKER)?UNLOCK_CUBE_FIRECRACKER_TIMEOUT:(($userReward['cube_id'] == CUBE_BOMB)?UNLOCK_CUBE_BOMB_TIMEOUT:(($userReward['cube_id'] == CUBE_METALBOMB) ? UNLOCK_CUBE_METALBOMB_TIMEOUT : UNLOCK_CUBE_ROCKET_TIMEOUT));

    $temp_time= strtotime(date("Y-m-d H:i:s", strtotime('+'.$maxTime.' hours', $userReward['claimed_at'])));
    $result['reward_unlock_time'] = (($userReward['claimed_at'] == 0) || (($temp_time) - time()<0))?0:(($temp_time) - time());  

    //$result['reward_unlock_time'] = (($userReward['claimed_at'] == 0) || (($userReward['claimed_at']+$maxTime) - time()<0))?0:(($userReward['claimed_at']+$maxTime) - time());
    $result['reward_status'] = ($userReward['status'] ==  CUBE_ON_PROCESS && $result['reward_unlock_time'] <= 0)?CUBE_CAN_BE_CLAIMED:$userReward['status'];
    $result['cube_id'] = $userReward['cube_id'];
    if($claimCrystalUpgrade['cube_upgrade_id']==3){
      $crystalDetail = $cubeLib->getCubeRewardDetailForStadium($userReward['cube_id'], $userReward['master_stadium_id']);  
      $crystalVal = $userDetail['crystal']-$crystalDetail['gems_cost']; 
      $result['reward_status']= $userReward['status'] =  CUBE_CAN_BE_CLAIMED;
    }
    //if cube active and player claimed then start the unlocking timer
    if($userReward['status'] ==  CUBE_ON_PROCESS &&  $result['reward_unlock_time'] <= 1)
    {
      $result['reward_unlock_time'] = $result['reward_unlock_time'];
      $result['reward_status'] = ($result['reward_unlock_time'] <= 0)?CUBE_CAN_BE_CLAIMED:CUBE_ON_PROCESS;
      $userLib->updateUserReward($userRewardId, array('status' => CUBE_CAN_BE_CLAIMED));
    }

    if($claimReward > 0)
    {
      //if cube active and player claimed then start the unlocking timer
      if($userReward['status'] ==  CUBE_ACTIVE )
      {
        //$result['reward_unlock_time'] = $maxTime;
        if(!empty($userReward['claimed_at']) && $userReward['claimed_at'] != 0){
          $temp_time= strtotime(date("Y-m-d H:i:s", strtotime('+'.$maxTime.' hours', $userReward['claimed_at'])));
          $result['reward_unlock_time'] = (($userReward['claimed_at'] == 0) || (($temp_time) - time()<0))?0:(($temp_time) - time());
        }else{
          $temp_time= strtotime(date("Y-m-d H:i:s", strtotime('+'.$maxTime.' hours', time())));  
          $result['reward_unlock_time'] = (($temp_time == 0) || (($temp_time) - time()<0))?0:(($temp_time) - time());
        }
          
        $result['reward_status'] = CUBE_ON_PROCESS;
        $userLib->updateUserReward($userRewardId, array('claimed_at' => time(), 'status' => CUBE_ON_PROCESS));
      }

      //player unlocked the card
      if($userReward['status'] ==  CUBE_CAN_BE_CLAIMED || ($result['reward_unlock_time'] <= 0 && $userReward['status'] ==  CUBE_ON_PROCESS))
      {
        $result['reward_unlock_time'] = 0;
        $cardIdList = $rareCardList = $ultraRareCardList = $cardList = array();
        $cardCount = 0;
        $cardIdList = $rewardLib->getRandomCard($cubeRewardDetail, $userReward['master_stadium_id']);
        //To check number of each card in a cube.
        // foreach($cardIdList as $cardId){
        //   $cardIdCountList[$cardId] += 1;
        // }
        //
        // foreach($cardIdCountList as $cardId => $cardCount){
        //   $cardList[] = $rewardLib->addRewardedCard($userId, $cardId, $cardCount);
        // }
        foreach($cardIdList as $cardId){
          $cardList[] = $rewardLib->addRewardedCard($userId, $cardId, DEFAULT_CARD_COUNT);
        }

        //$userLib->updateUser($userId, array('gold' => $userDetail['gold']+ $cubeRewardDetail['gold']));
        $userLib->updateUser($userId,  array('crystal' => $userDetail['crystal'] + COPPER_CUBE_CRYSTAL_COUNT,'is_copper_cube_notification_sent'=>CONTENT_ACTIVE));
        if($userDetail['gems'])
        {
          $totalCrystal = $crystalVal + $userDetail['gems'];
        }else{
          $totalCrystal = $crystalVal;
        }
        $userLib->updateUser($userId, array('gold' => $userDetail['gold']+ $cubeRewardDetail['gold'], 'crystal' => $totalCrystal));
        $result['card_details'] = $cardList;
        $result['reward_status'] = CONTENT_CLOSED;
        $userLib->updateUserReward($userRewardId, array('claimed_at' => time(), 'status' => CONTENT_CLOSED));
        $userReward = $userLib->getUserRewardDetail($userRewardId);
      }
    }

    $result['master_stadium_id'] = $userReward['master_stadium_id'];
    $result['gems']=$cubeRewardDetail['gems'];
    if(!empty($cubeRewardDetail)){
      $result['gold_bonus'] = $cubeRewardDetail['gold'];
      $result['total_card_in_cube'] = $cubeRewardDetail['card_count'];

      if($cubeRewardDetail['rare'] > 0){
        $result['total_rare_card_in_cube'] = $cubeRewardDetail['rare'];
      }

      if($cubeRewardDetail['ultra_rare'] > 0){
        $result['total_ultra_rare_card_in_cube'] = $cubeRewardDetail['ultra_rare'];
      }
    }

    return $result;
  }

  public function getLastCubeRewardDetailForUser($userId, $cubeId, $options=array())
  {
    $sql = "SELECT created_at, status, claimed_at
            FROM user_reward
            WHERE user_id = :userId AND cube_id = :cubeId
            ORDER BY created_at DESC";

    $result = database::doSelectOne($sql, array('userId' => $userId, 'cubeId' => $cubeId));
    return $result;
  }

  public function addRewardedCard($userId, $cardId, $cardCount)
  {
    $cardLib = autoload::loadLibrary('queryLib', 'card');

    $masterCard = $cardLib->getMasterCardDetail($cardId);
    $masterCardPropertyList = $cardLib->getMasterCardPropertyList($cardId);

    $userCard = $cardLib->getUserCardDetailForMasterCardId($userId, $cardId);
    $temp = array();

    $temp["master_card_id"] = $cardId;
    $temp['card_level'] = $cardLevelId = (empty($userCard))?DEFAULT_CARD_LEVEL_ID:$userCard["level_id"];
    $userCardCount = (empty($userCard))?DEFAULT_CARD_COUNT:$userCard["user_card_count"]+1;
    $temp['total_card'] = $userCardCount;
    $levelUpgradeCardDetail = $cardLib->getMasterCardLevelUpgradeForCardCount($cardLevelId+1, $masterCard['card_rarity_type']);
    $temp['next_level_card_count'] = $levelUpgradeCardDetail["card_count"];
    $temp['card_rarity_type'] = $masterCard["card_rarity_type"];

    if(!empty($userCard)) {
      $cardLib->updateUserCard($userCard['user_card_id'], array("user_card_count" => $userCardCount));
    }

    if( empty($userCard))
    {
      $userCardId =  $cardLib->insertUserCard(array('user_id' => $userId,
                      'master_card_id' => $cardId,
                      'is_deck' => CONTENT_INACTIVE,
                      'level_id' => DEFAULT_CARD_LEVEL_ID,
                      'user_card_count' => DEFAULT_CARD_COUNT,
                      'created_at' => date('Y-m-d H:i:s'),
                      'status' => CONTENT_ACTIVE));

     foreach($masterCardPropertyList as $cardProperty)
     {
       $cardPropertyValue = $cardLib->getCardPropertyValue($cardId, DEFAULT_CARD_LEVEL_ID, $cardProperty['card_property_id']);

       $cardLib->insertUserCardProperty(array('user_id' => $userId,
                        'card_property_id' => $cardProperty['card_property_id'],
                        'user_card_id' => $userCardId,
                        'user_card_property_value' => $cardPropertyValue['card_property_value'],
                        'created_at' => date('Y-m-d H:i:s')
                      ));
     }
    }

    return $temp;
  }

  public function rewardCopperCube($userId, $masterStadiumId )
  {
    $userLib = autoload::loadLibrary('queryLib', 'user');

    $userLib->insertUserReward(array(
                'user_id' =>$userId,
                'cube_id' => CUBE_DYNAMITE,
                'master_stadium_id' => $masterStadiumId,
                'created_at' => date('Y-m-d H:i:s'),
                'status' => CUBE_CAN_BE_CLAIMED));

    $userLib->updateUser($userId, array('is_copper_cube_notification_sent' => CONTENT_INACTIVE));
  }

  public function getMasterMatchStatusRewardForStadium($winStatus, $masterStadiumId, $options=array())
  {
    $sql = "SELECT *
            FROM master_match_status_reward
            WHERE win_status = :winStatus AND master_stadium_id = :masterStadiumId";

    $result = database::doSelectOne($sql, array('winStatus' => $winStatus, 'masterStadiumId' => $masterStadiumId));
    return $result;
  }

  public function getRandomCard($cubeRewardDetail, $masteStadiumId)
  {
    $cardLib = autoload::loadLibrary('queryLib', 'card');
    $userLib = autoload::loadLibrary('queryLib', 'user');
    $cardIdList = $rareCardList = $ultraRareCardList = $cardList = array();
    $cardCount = 0;
    $excludeCardId = 0;

    if($cubeRewardDetail['common'] > 0)
    {
        $probability = rand(1,100);
        $rareCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_COMMON, $probability, $excludeCardId, $cubeRewardDetail['common']);
        if(count($rareCardList) < $cubeRewardDetail['common'])
        {
          if(!empty($rareCardList))
            {
              foreach($rareCardList as $item) {
                $cardIdList[$cardCount++] = $rareCard['master_card_id'];
              }
              $excludeCardId = implode(',',$cardIdList);
            }      
            $probability = 100;
            $rareCardList = $cardLib->getMasterCardListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_COMMON, $probability, $excludeCardId, $cubeRewardDetail['common']);
            if(!empty($rareCardList))
            {
              foreach($rareCardList as $rareCard) {
                $cardIdList[$cardCount++] = $rareCard['master_card_id'];
              }
            }
        }else{
            foreach($rareCardList as $rareCard) {
              $cardIdList[$cardCount++] = $rareCard['master_card_id'];
            }
        }
          $excludeCardId = implode(',',$cardIdList);
    }
    if($cubeRewardDetail['rare'] > 0)
    {
      $probability = rand(1,100);
      $rareCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_RARE, $probability, $excludeCardId, $cubeRewardDetail['rare']);

      if(count($rareCardList) < $cubeRewardDetail['rare'])
      {
        if(!empty($rareCardList))
        {
          foreach($rareCardList as $item) {
            $cardIdList[$cardCount++] = $rareCard['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }
        $probability = 100;
        $rareCardList = $cardLib->getMasterCardListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_RARE, $probability, $excludeCardId, $cubeRewardDetail['rare']);
        if(!empty($rareCardList))
        {
          foreach($rareCardList as $rareCard) {
            $cardIdList[$cardCount++] = $rareCard['master_card_id'];
          }
        }
      } else
      {
        foreach($rareCardList as $rareCard) {
          $cardIdList[$cardCount++] = $rareCard['master_card_id'];
        }
      }
      $excludeCardId = implode(',',$cardIdList);
    }

    if($cubeRewardDetail['epic'] > 0)
    {
      $probability = rand(1,100);

      $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_EPIC, $probability, $excludeCardId, $cubeRewardDetail['epic']);
      if(count($ultraRearCardList) < $cubeRewardDetail['epic'])
      {
        if(!empty($ultraRearCardList))
        {
          foreach($ultraRearCardList as $item) {
            $cardIdList[$cardCount++] = $item['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }

        $probability = 100;
        $ultraRearCardList = $cardLib->getMasterCardListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_EPIC, $probability, $excludeCardId, $cubeRewardDetail['epic']);

        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      } else
      {
        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      }
      $excludeCardId = implode(',',$cardIdList);
    }

    if($cubeRewardDetail['ultra_epic'] > 0)
    {
      $probability = rand(1,100);

      $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_ULTRA_EPIC, $probability, $excludeCardId, $cubeRewardDetail['ultra_epic']);
      if(count($ultraRearCardList) < $cubeRewardDetail['ultra_epic'])
      {
        if(!empty($ultraRearCardList))
        {
          foreach($ultraRearCardList as $item) {
            $cardIdList[$cardCount++] = $item['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }

        $probability = 100;
        $ultraRearCardList = $cardLib->getMasterCardListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_ULTRA_EPIC, $probability, $excludeCardId, $cubeRewardDetail['ultra_epic']);

        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      } else
      {
        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      }
      $excludeCardId = implode(',',$cardIdList);
    }
/*
    if($cubeRewardDetail['common'] > 0){
      $probability = rand(1,100);

      $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_COMMON, $probability, $excludeCardId, $cubeRewardDetail['common']);
      if(count($ultraRearCardList) < $cubeRewardDetail['common'])
      {
        if(!empty($ultraRearCardList))
        {
          foreach($ultraRearCardList as $item) {
            $cardIdList[$cardCount++] = $item['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }

        $probability = 100;
        $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_COMMON, $probability, $excludeCardId, $cubeRewardDetail['common']);

        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      } else
      {
        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      }
      $excludeCardId = implode(',',$cardIdList);
    }
*/
    if(count($cardIdList) < $cubeRewardDetail['card_count'])
    {
      $remainingCardCount  =  $cubeRewardDetail['card_count'] - count($cardIdList);
      $probability = rand(1,100);

      $cardList = $cardLib->getMasterCardBasedOnStadiumAndProbability($masteStadiumId, $probability, $excludeCardId, $remainingCardCount);

      if(count($cardList) < $remainingCardCount)
      {
        if(!empty($cardList))
        {
          foreach($cardList as $item) {
            $cardIdList[$cardCount++] = $item['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }

        $probability = 100;
        $cardList = $cardLib->getMasterCardListBasedOnStadiumAndRarity($masteStadiumId, $probability, $excludeCardId, $remainingCardCount);

        foreach($cardList as $item) {
          $cardIdList[$cardCount++] = $item['master_card_id'];
        }
      } else
      {
        foreach($cardList as $item) {
          $cardIdList[$cardCount++] = $item['master_card_id'];
        }
      }
    } 
    return $cardIdList;
  }
  /*public function getRandomCard($cubeRewardDetail, $masteStadiumId)
  {
    $cardLib = autoload::loadLibrary('queryLib', 'card');
    $cardIdList = $rareCardList = $ultraRareCardList = $cardList = array();
    $cardCount = 0;
    $excludeCardId = 0;

    if($cubeRewardDetail['rare'] > 0)
    {
      $probability = rand(1,100);
      $rareCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_RARE, $probability, $excludeCardId, $cubeRewardDetail['rare']);

      if(count($rareCardList) < $cubeRewardDetail['rare'])
      {
        if(!empty($rareCardList))
        {
          foreach($rareCardList as $item) {
            $cardIdList[$cardCount++] = $rareCard['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }
        $probability = 100;
        $rareCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_RARE, $probability, $excludeCardId, $cubeRewardDetail['rare']);
        if(!empty($rareCardList))
        {
          foreach($rareCardList as $rareCard) {
            $cardIdList[$cardCount++] = $rareCard['master_card_id'];
          }
        }
      } else
      {
        foreach($rareCardList as $rareCard) {
          $cardIdList[$cardCount++] = $rareCard['master_card_id'];
        }
      }
      $excludeCardId = implode(',',$cardIdList);
    }

    if($cubeRewardDetail['ultra_rare'] > 0)
    {
      $probability = rand(1,100);

      $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_ULTRA_RARE, $probability, $excludeCardId, $cubeRewardDetail['ultra_rare']);
      if(count($ultraRearCardList) < $cubeRewardDetail['ultra_rare'])
      {
        if(!empty($ultraRearCardList))
        {
          foreach($ultraRearCardList as $item) {
            $cardIdList[$cardCount++] = $item['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }

        $probability = 100;
        $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_ULTRA_RARE, $probability, $excludeCardId, $cubeRewardDetail['ultra_rare']);

        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      } else
      {
        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      }
      $excludeCardId = implode(',',$cardIdList);
    }

    if($cubeRewardDetail['common'] > 0){
      $probability = rand(1,100);

      $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_COMMON, $probability, $excludeCardId, $cubeRewardDetail['common']);
      if(count($ultraRearCardList) < $cubeRewardDetail['common'])
      {
        if(!empty($ultraRearCardList))
        {
          foreach($ultraRearCardList as $item) {
            $cardIdList[$cardCount++] = $item['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }

        $probability = 100;
        $ultraRearCardList = $cardLib->getMasterCardProbabilityListBasedOnStadiumAndRarity($masteStadiumId, CARD_RARITY_COMMON, $probability, $excludeCardId, $cubeRewardDetail['common']);

        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      } else
      {
        foreach($ultraRearCardList as $ultraRearCard) {
          $cardIdList[$cardCount++] = $ultraRearCard['master_card_id'];
        }
      }
      $excludeCardId = implode(',',$cardIdList);
    }

    if(count($cardIdList) < $cubeRewardDetail['card_count'])
    {
      $remainingCardCount  =  $cubeRewardDetail['card_count'] - count($cardIdList);
      $probability = rand(1,100);

      $cardList = $cardLib->getMasterCardBasedOnStadiumAndProbability($masteStadiumId, $probability, $excludeCardId, $remainingCardCount);

      if(count($cardList) < $remainingCardCount)
      {
        if(!empty($cardList))
        {
          foreach($cardList as $item) {
            $cardIdList[$cardCount++] = $item['master_card_id'];
          }
          $excludeCardId = implode(',',$cardIdList);
        }

        $probability = 100;
        $cardList = $cardLib->getMasterCardBasedOnStadiumAndProbability($masteStadiumId, $probability, $excludeCardId, $remainingCardCount);

        foreach($cardList as $item) {
          $cardIdList[$cardCount++] = $item['master_card_id'];
        }
      } else
      {
        foreach($cardList as $item) {
          $cardIdList[$cardCount++] = $item['master_card_id'];
        }
      }
    }
    return $cardIdList;
  }
*/
  public function getUserRewardListForDate($userId, $cubeId, $options=array())
  {
    $sql = "SELECT *
            FROM user_reward
            WHERE  user_id = :userId AND cube_id = :cubeId AND status = :status";

    $result = database::doSelect($sql, array('userId' => $userId, 'cubeId' => $cubeId, 'status' => CONTENT_CLOSED));
    return $result;
  }

  public function getLastFreeCubeRewardDetailForUser($userId, $cubeId, $options=array())
  {
    $sql = "SELECT created_at, status, claimed_at
            FROM user_reward
            WHERE user_id = :userId AND cube_id IN (".$cubeId.")
            ORDER BY created_at DESC";

    $result = database::doSelectOne($sql, array('userId' => $userId));
    return $result;
  }

}
